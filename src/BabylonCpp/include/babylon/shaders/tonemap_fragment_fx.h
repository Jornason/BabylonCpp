#ifndef BABYLON_SHADERS_TONEMAP_FRAGMENT_FX_H
#define BABYLON_SHADERS_TONEMAP_FRAGMENT_FX_H

namespace BABYLON {

extern const char* tonemapPixelShader;

const char* tonemapPixelShader
  = "// Samplers\n"
    "varying vec2 vUV;\n"
    "uniform sampler2D textureSampler;\n"
    "\n"
    "// Constants\n"
    "uniform float _ExposureAdjustment;\n"
    "\n"
    "#if defined(HABLE_TONEMAPPING)\n"
    "  const float A = 0.15;\n"
    "  const float B = 0.50;\n"
    "  const float C = 0.10;\n"
    "  const float D = 0.20;\n"
    "  const float E = 0.02;\n"
    "  const float F = 0.30;\n"
    "  const float W = 11.2;\n"
    "#endif\n"
    "\n"
    "float Luminance(vec3 c)\n"
    "{\n"
    "  return dot(c, vec3(0.22, 0.707, 0.071));\n"
    "}\n"
    "\n"
    "void main(void) \n"
    "{\n"
    "  vec3 colour = texture2D(textureSampler, vUV).rgb;\n"
    "\n"
    "#if defined(REINHARD_TONEMAPPING)\n"
    "\n"
    "  float lum = Luminance(colour.rgb); \n"
    "  float lumTm = lum * _ExposureAdjustment;\n"
    "  float scale = lumTm / (1.0 + lumTm);  \n"
    "\n"
    "  colour *= scale / lum;\n"
    "\n"
    "#elif defined(HABLE_TONEMAPPING)\n"
    "\n"
    "  colour *= _ExposureAdjustment;\n"
    "\n"
    "  const float ExposureBias = 2.0;\n"
    "  vec3 x = ExposureBias * colour;\n"
    "\n"
    "  vec3 curr = ((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F;\n"
    "  \n"
    "  x = vec3(W, W, W);\n"
    "  vec3 whiteScale = 1.0 / (((x * (A * x + C * B) + D * E) / (x * (A * x + B) + D * F)) - E / F);\n"
    "  colour = curr * whiteScale;\n"
    "\n"
    "#elif defined(OPTIMIZED_HEJIDAWSON_TONEMAPPING)\n"
    "\n"
    "  colour *= _ExposureAdjustment;\n"
    "  \n"
    "  vec3 X = max(vec3(0.0, 0.0, 0.0), colour - 0.004);\n"
    "  vec3 retColor = (X * (6.2 * X + 0.5)) / (X * (6.2 * X + 1.7) + 0.06);\n"
    "\n"
    "  colour = retColor * retColor;\n"
    "\n"
    "#elif defined(PHOTOGRAPHIC_TONEMAPPING)\n"
    "\n"
    "  colour =  vec3(1.0, 1.0, 1.0) - exp2(-_ExposureAdjustment * colour);\n"
    "\n"
    "#endif\n"
    "\n"
    "  gl_FragColor = vec4(colour.rgb, 1.0);\n"
    "}\n";

} // end of namespace BABYLON

#endif // end of BABYLON_SHADERS_TONEMAP_FRAGMENT_FX_H
